/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package AplikasiPenjualan;

import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
/**
 *
 * @author X13 Yoga
 */
public final class DataForm extends javax.swing.JInternalFrame {

    /**
     * Creates new form DataForm
     */
    public DataForm() {
        initComponents();
        showTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableData = new javax.swing.JTable();
        toMenuButton = new javax.swing.JButton();
        totalHouseTxt = new javax.swing.JTextField();
        totalIncomeTxt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        tableData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nomor Pesanan", "Nama Pemesan", "Area", "Tipe Rumah", "Luas Tanah", "Harga", "Lama Cicilan", "Cicilan / Bulan"
            }
        ));
        jScrollPane1.setViewportView(tableData);

        toMenuButton.setText("Ke Menu Utama");
        toMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toMenuButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Jumlah Rumah Terjual");

        jLabel2.setText("Total Penjualan");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 738, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(toMenuButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(jLabel2)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(totalIncomeTxt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(totalHouseTxt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(toMenuButton)
                    .addComponent(totalHouseTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalIncomeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(0, 25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void showTable(){
        Connection conn = null;
        Statement stat = null;
        ResultSet rs = null;

        try {
            // 1. Dapatkan koneksi dari ConnectionDb
            conn = ConnectionDb.getConnection(); // Panggil method getConnection() yang benar dari ConnectionDb.

            // Periksa apakah koneksi berhasil
            if (conn != null) {
                // 2. Buat Statement dari objek Connection (BUKAN dari static variable di ConnectionDb)
                stat = conn.createStatement(); // Ini adalah cara yang benar untuk mendapatkan Statement dari Connection.
                String sql = "select * from rumah"; // Query untuk mendapatkan semua data rumah.

                // 3. Eksekusi query dan dapatkan ResultSet
                rs = stat.executeQuery(sql);

                DefaultTableModel tableModel = (DefaultTableModel) tableData.getModel();
                // Kosongkan tabel sebelum mengisi ulang
                tableModel.setRowCount(0);

                // 4. Isi data ke tabel model
                while (rs.next()) {
                    tableModel.addRow(new Object[]{
                        rs.getString(1), // Nomor Pesanan
                        rs.getString(2), // Nama Pemesan
                        rs.getString(3), // Area
                        rs.getString(4), // Tipe Rumah
                        rs.getString(5), // Luas Tanah
                        rs.getString(6), // Harga
                        rs.getString(7), // Lama Cicilan
                        rs.getString(8)  // Cicilan / Bulan
                    });
                }

                // Opsional: Untuk memperbarui totalHouseTxt dan totalIncomeTxt
                totalHouseTxt.setText(String.valueOf(tableModel.getRowCount()));
                double totalIncome = 0;
                for (int i = 0; i < tableModel.getRowCount(); i++) {
                    // Asumsi kolom 'Harga' adalah indeks 5 (kolom ke-6). Sesuaikan jika berbeda.
                    try {
                        // Pastikan data di kolom 'Harga' bisa di-parse sebagai Double
                        totalIncome += Double.parseDouble(tableModel.getValueAt(i, 5).toString());
                    } catch (NumberFormatException nfe) {
                        System.err.println("Data harga tidak valid pada baris " + i + ": " + tableModel.getValueAt(i, 5));
                        // Atau tampilkan JOptionPane untuk kesalahan data
                        // JOptionPane.showMessageDialog(this, "Data harga tidak valid pada baris " + (i + 1), "Kesalahan Data", JOptionPane.WARNING_MESSAGE);
                    }
                }
                totalIncomeTxt.setText(String.format("%,.2f", totalIncome));


            } else {
                System.err.println("Koneksi ke database gagal, tidak bisa menampilkan tabel.");
                JOptionPane.showMessageDialog(this, "Tidak dapat terhubung ke database untuk menampilkan data.", "Kesalahan Data", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            Logger.getLogger(DataForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat mengambil data dari database:\n" + ex.getMessage(), "Kesalahan SQL", JOptionPane.ERROR_MESSAGE);
        } finally {
            // Pastikan semua sumber daya ditutup
            try {
                if (rs != null) rs.close();
                if (stat != null) stat.close();
                if (conn != null) conn.close();
                System.out.println("Sumber daya database ditutup.");
            } catch (SQLException ex) {
                Logger.getLogger(DataForm.class.getName()).log(Level.SEVERE, null, ex);
                System.err.println("Gagal menutup sumber daya database: " + ex.getMessage());
            }
        }
    }
    
    private void toMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toMenuButtonActionPerformed
        OptionMenu optionMenu = new OptionMenu();
        optionMenu.setVisible(true);
        this.getDesktopPane().add(optionMenu);
        this.dispose();
    }//GEN-LAST:event_toMenuButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableData;
    private javax.swing.JButton toMenuButton;
    private javax.swing.JTextField totalHouseTxt;
    private javax.swing.JTextField totalIncomeTxt;
    // End of variables declaration//GEN-END:variables
}
